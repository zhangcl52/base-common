package com.hunter.common.transaction;import org.springframework.transaction.PlatformTransactionManager;import org.springframework.transaction.TransactionDefinition;import org.springframework.transaction.TransactionStatus;import org.springframework.transaction.support.DefaultTransactionDefinition;/** * @Author zhangcl * @Date 17/8/11  下午6:32 */public class TransactionManager {    private PlatformTransactionManager txManager;    /**     * 开启一个事物，使用默认事物传播行为和隔离级别     *     * @param transactionCallback     */    public Object doInTransaction(TransactionCallback transactionCallback) {        Object object = null;        DefaultTransactionDefinition def = new DefaultTransactionDefinition();        def.setIsolationLevel(TransactionDefinition.ISOLATION_READ_COMMITTED);        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);        TransactionStatus ts = txManager.getTransaction(def);        boolean isNested = TransactionContext.isInTransaction();//是否嵌套事物        try {            if(!isNested){                TransactionContext.enterTransaction();//嵌套事物由外层标记enter            }            object = transactionCallback.doTransaction();            txManager.commit(ts);        } catch (Exception ex) {            txManager.rollback(ts);            throw ex;        } finally {            if(!isNested){//嵌套事物由外层标记leave                TransactionContext.leaveTransaction();            }        }        return object;    }    public void setTxManager(PlatformTransactionManager txManager) {        this.txManager = txManager;    }}